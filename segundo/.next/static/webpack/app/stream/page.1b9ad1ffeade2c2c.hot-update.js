"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/stream/page",{

/***/ "(app-pages-browser)/./src/services/firebase.ts":
/*!**********************************!*\
  !*** ./src/services/firebase.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   createUserWithEmailVerification: () => (/* binding */ createUserWithEmailVerification),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   deleteUserAccount: () => (/* binding */ deleteUserAccount),\n/* harmony export */   exploreFirebaseData: () => (/* binding */ exploreFirebaseData),\n/* harmony export */   getCurrentStreamingData: () => (/* binding */ getCurrentStreamingData),\n/* harmony export */   getCurrentUser: () => (/* binding */ getCurrentUser),\n/* harmony export */   isEmailVerified: () => (/* binding */ isEmailVerified),\n/* harmony export */   isUserAuthenticated: () => (/* binding */ isUserAuthenticated),\n/* harmony export */   listenToStreamControl: () => (/* binding */ listenToStreamControl),\n/* harmony export */   listenToStreamingData: () => (/* binding */ listenToStreamingData),\n/* harmony export */   resendEmailVerification: () => (/* binding */ resendEmailVerification),\n/* harmony export */   sendPasswordReset: () => (/* binding */ sendPasswordReset),\n/* harmony export */   signInUser: () => (/* binding */ signInUser),\n/* harmony export */   signOutUser: () => (/* binding */ signOutUser),\n/* harmony export */   updateStreamControl: () => (/* binding */ updateStreamControl),\n/* harmony export */   updateUserPassword: () => (/* binding */ updateUserPassword)\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/auth */ \"(app-pages-browser)/./node_modules/firebase/auth/dist/esm/index.esm.js\");\n/* harmony import */ var _config_firebase_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/firebase.config */ \"(app-pages-browser)/./src/config/firebase.config.ts\");\n\n\n\n\n// Validate Firebase configuration on startup\n(0,_config_firebase_config__WEBPACK_IMPORTED_MODULE_3__.validateFirebaseConfig)();\n// Initialize Firebase\nconst app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(_config_firebase_config__WEBPACK_IMPORTED_MODULE_3__.firebaseConfig);\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getFirestore)(app);\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.getAuth)(app);\n// Helper function to safely convert Firestore values to Date\nconst toSafeDate = (value)=>{\n    if (!value) return new Date(0);\n    if (value instanceof Date) return value;\n    if (typeof value === \"string\" || typeof value === \"number\") {\n        const d = new Date(value);\n        return isNaN(d.getTime()) ? new Date(0) : d;\n    }\n    if (typeof value === \"object\" && value !== null && \"toDate\" in value) {\n        return value.toDate();\n    }\n    const d = new Date(value);\n    return isNaN(d.getTime()) ? new Date(0) : d;\n};\n// Listen to streaming data in real-time\nconst listenToStreamingData = (callback)=>{\n    console.log(\"🔍 Segundo listening to: streaming/avryzcqeibphtefihmsrjfbugeq1\");\n    const streamingRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"streaming\", \"avryzcqeibphtefihmsrjfbugeq1\");\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.onSnapshot)(streamingRef, (doc)=>{\n        console.log(\"🔍 Firebase snapshot received:\", doc.exists() ? \"Document exists\" : \"Document does not exist\");\n        if (doc.exists()) {\n            const raw = doc.data();\n            // Handle mobile app's data structure\n            const overview = raw.overview || {};\n            const roundsData = raw.rounds || {};\n            // Debug: Log the raw data structure\n            console.log(\"🔍 Raw Firebase data:\", raw);\n            console.log(\"🔍 Overview data:\", overview);\n            console.log(\"🔍 Raw teams:\", raw.teams);\n            console.log(\"🔍 Overview teams:\", overview.teams);\n            console.log(\"🔍 Rounds data:\", roundsData);\n            console.log(\"🔍 Champion data:\", raw.champion);\n            // Check for other possible team data locations\n            console.log(\"🔍 All raw data keys:\", Object.keys(raw));\n            console.log(\"🔍 All overview keys:\", Object.keys(overview));\n            // Look for teams in other possible locations\n            if (raw.teamsData) console.log(\"🔍 teamsData:\", raw.teamsData);\n            if (raw.teamList) console.log(\"🔍 teamList:\", raw.teamList);\n            if (raw.participants) console.log(\"🔍 participants:\", raw.participants);\n            if (overview.teamsData) console.log(\"🔍 overview.teamsData:\", overview.teamsData);\n            if (overview.teamList) console.log(\"🔍 overview.teamList:\", overview.teamList);\n            if (overview.participants) console.log(\"🔍 overview.participants:\", overview.participants);\n            // Debug: Log detailed rounds structure\n            Object.entries(roundsData).forEach((param)=>{\n                let [roundKey, roundData] = param;\n                console.log(\"\\uD83D\\uDD0D Round \".concat(roundKey, \":\"), roundData);\n                if (roundData && typeof roundData === \"object\" && roundData !== null && \"matches\" in roundData && Array.isArray(roundData.matches)) {\n                    const round = roundData;\n                    round.matches.forEach((match, matchIndex)=>{\n                        console.log(\"\\uD83D\\uDD0D Match \".concat(matchIndex, \" in \").concat(roundKey, \":\"), match);\n                        if (match && typeof match === \"object\" && match !== null) {\n                            const matchObj = match;\n                            if (matchObj.team1) console.log(\"\\uD83D\\uDD0D Team1 details:\", matchObj.team1);\n                            if (matchObj.team2) console.log(\"\\uD83D\\uDD0D Team2 details:\", matchObj.team2);\n                        }\n                    });\n                }\n            });\n            // Extract teams from rounds data if teams array is empty\n            let teams = [];\n            console.log(\"🔍 Raw teams array:\", raw.teams);\n            console.log(\"🔍 Overview teams array:\", overview.teams);\n            if (Array.isArray(raw.teams) && raw.teams.length > 0) {\n                console.log(\"🔍 Using raw.teams:\", raw.teams.length, \"teams\");\n                teams = raw.teams;\n            } else if (Array.isArray(overview.teams) && overview.teams.length > 0) {\n                console.log(\"🔍 Using overview.teams:\", overview.teams.length, \"teams\");\n                teams = overview.teams;\n            } else {\n                console.log(\"🔍 Extracting teams from rounds data...\");\n                // Extract teams from rounds data\n                const teamMap = new Map();\n                Object.values(roundsData).forEach((round, roundIndex)=>{\n                    console.log(\"\\uD83D\\uDD0D Processing round \".concat(roundIndex, \":\"), round);\n                    if (round && round.matches && Array.isArray(round.matches)) {\n                        // Check for team1 and team2 in matches\n                        const roundData = round;\n                        if (roundData.matches && Array.isArray(roundData.matches)) {\n                            roundData.matches.forEach((match)=>{\n                                if (match && typeof match === \"object\" && match !== null && \"team1\" in match && \"team2\" in match) {\n                                    var _matchData_team1, _matchData_team2;\n                                    const matchData = match;\n                                    if (matchData.team1 && matchData.team1.id && ((_matchData_team1 = matchData.team1) === null || _matchData_team1 === void 0 ? void 0 : _matchData_team1.name) && matchData.team1.name !== \"Unknown Team\" && matchData.team1.name.trim().length > 0) {\n                                        var _matchData_team11;\n                                        console.log(\"\\uD83D\\uDD0D Found team1: \".concat(((_matchData_team11 = matchData.team1) === null || _matchData_team11 === void 0 ? void 0 : _matchData_team11.name) || \"Unknown\", \" (\").concat(matchData.team1.id, \")\"));\n                                        if (!teamMap.has(matchData.team1.id)) {\n                                            var _matchData_team12, _matchData_team13;\n                                            // Parse playerNames string into individual players\n                                            const players = [];\n                                            if (matchData.team1.playerNames && typeof matchData.team1.playerNames === \"string\") {\n                                                var _matchData_team14, _matchData_team15, _matchData_team16, _matchData_team17;\n                                                console.log(\"\\uD83D\\uDD0D Team1 \".concat(((_matchData_team14 = matchData.team1) === null || _matchData_team14 === void 0 ? void 0 : _matchData_team14.name) || \"Unknown\", \" playerNames string:\"), matchData.team1.playerNames);\n                                                const rawPlayerNames = matchData.team1.playerNames.split(\",\");\n                                                console.log(\"\\uD83D\\uDD0D Team1 \".concat(((_matchData_team15 = matchData.team1) === null || _matchData_team15 === void 0 ? void 0 : _matchData_team15.name) || \"Unknown\", \" raw split:\"), rawPlayerNames);\n                                                const trimmedPlayerNames = rawPlayerNames.map((name)=>name.trim());\n                                                console.log(\"\\uD83D\\uDD0D Team1 \".concat(((_matchData_team16 = matchData.team1) === null || _matchData_team16 === void 0 ? void 0 : _matchData_team16.name) || \"Unknown\", \" after trim:\"), trimmedPlayerNames);\n                                                const playerNames = trimmedPlayerNames.filter((name)=>{\n                                                    var _matchData_team1;\n                                                    const isValid = name && name.length > 0 && name !== \"Player\";\n                                                    console.log(\"\\uD83D\\uDD0D Team1 \".concat(((_matchData_team1 = matchData.team1) === null || _matchData_team1 === void 0 ? void 0 : _matchData_team1.name) || \"Unknown\", ' filtering \"').concat(name, '\": ').concat(isValid));\n                                                    return isValid;\n                                                });\n                                                console.log(\"\\uD83D\\uDD0D Team1 \".concat(((_matchData_team17 = matchData.team1) === null || _matchData_team17 === void 0 ? void 0 : _matchData_team17.name) || \"Unknown\", \" parsed player names:\"), playerNames);\n                                                playerNames.forEach((playerName, index)=>{\n                                                    players.push({\n                                                        id: \"\".concat(matchData.team1.id, \"_player_\").concat(index),\n                                                        name: playerName,\n                                                        captain: false\n                                                    });\n                                                });\n                                            }\n                                            console.log(\"\\uD83D\\uDD0D Creating team1: \".concat(((_matchData_team12 = matchData.team1) === null || _matchData_team12 === void 0 ? void 0 : _matchData_team12.name) || \"Unknown\", \" with \").concat(players.length, \" players\"));\n                                            teamMap.set(matchData.team1.id, {\n                                                id: matchData.team1.id,\n                                                name: ((_matchData_team13 = matchData.team1) === null || _matchData_team13 === void 0 ? void 0 : _matchData_team13.name) || \"Unknown\",\n                                                manager: \"\",\n                                                captain: \"\",\n                                                players: players,\n                                                color: \"\",\n                                                icon: \"\"\n                                            });\n                                        }\n                                    }\n                                    if (matchData.team2 && matchData.team2.id && ((_matchData_team2 = matchData.team2) === null || _matchData_team2 === void 0 ? void 0 : _matchData_team2.name) && matchData.team2.name !== \"Unknown Team\" && matchData.team2.name.trim().length > 0) {\n                                        var _matchData_team21;\n                                        console.log(\"\\uD83D\\uDD0D Found team2: \".concat(((_matchData_team21 = matchData.team2) === null || _matchData_team21 === void 0 ? void 0 : _matchData_team21.name) || \"Unknown\", \" (\").concat(matchData.team2.id, \")\"));\n                                        if (!teamMap.has(matchData.team2.id)) {\n                                            var _matchData_team22, _matchData_team23;\n                                            // Parse playerNames string into individual players\n                                            const players = [];\n                                            if (matchData.team2.playerNames && typeof matchData.team2.playerNames === \"string\") {\n                                                var _matchData_team24, _matchData_team25, _matchData_team26, _matchData_team27;\n                                                console.log(\"\\uD83D\\uDD0D Team2 \".concat(((_matchData_team24 = matchData.team2) === null || _matchData_team24 === void 0 ? void 0 : _matchData_team24.name) || \"Unknown\", \" playerNames string:\"), matchData.team2.playerNames);\n                                                const rawPlayerNames = matchData.team2.playerNames.split(\",\");\n                                                console.log(\"\\uD83D\\uDD0D Team2 \".concat(((_matchData_team25 = matchData.team2) === null || _matchData_team25 === void 0 ? void 0 : _matchData_team25.name) || \"Unknown\", \" raw split:\"), rawPlayerNames);\n                                                const trimmedPlayerNames = rawPlayerNames.map((name)=>name.trim());\n                                                console.log(\"\\uD83D\\uDD0D Team2 \".concat(((_matchData_team26 = matchData.team2) === null || _matchData_team26 === void 0 ? void 0 : _matchData_team26.name) || \"Unknown\", \" after trim:\"), trimmedPlayerNames);\n                                                const playerNames = trimmedPlayerNames.filter((name)=>{\n                                                    var _matchData_team2;\n                                                    const isValid = name && name.length > 0 && name !== \"Player\";\n                                                    console.log(\"\\uD83D\\uDD0D Team2 \".concat(((_matchData_team2 = matchData.team2) === null || _matchData_team2 === void 0 ? void 0 : _matchData_team2.name) || \"Unknown\", ' filtering \"').concat(name, '\": ').concat(isValid));\n                                                    return isValid;\n                                                });\n                                                console.log(\"\\uD83D\\uDD0D Team2 \".concat(((_matchData_team27 = matchData.team2) === null || _matchData_team27 === void 0 ? void 0 : _matchData_team27.name) || \"Unknown\", \" parsed player names:\"), playerNames);\n                                                playerNames.forEach((playerName, index)=>{\n                                                    players.push({\n                                                        id: \"\".concat(matchData.team2.id, \"_player_\").concat(index),\n                                                        name: playerName,\n                                                        captain: false\n                                                    });\n                                                });\n                                            }\n                                            console.log(\"\\uD83D\\uDD0D Creating team2: \".concat(((_matchData_team22 = matchData.team2) === null || _matchData_team22 === void 0 ? void 0 : _matchData_team22.name) || \"Unknown\", \" with \").concat(players.length, \" players\"));\n                                            teamMap.set(matchData.team2.id, {\n                                                id: matchData.team2.id,\n                                                name: ((_matchData_team23 = matchData.team2) === null || _matchData_team23 === void 0 ? void 0 : _matchData_team23.name) || \"Unknown\",\n                                                manager: \"\",\n                                                captain: \"\",\n                                                players: players,\n                                                color: \"\",\n                                                icon: \"\"\n                                            });\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                teams = Array.from(teamMap.values());\n            }\n            // Debug: Log team and player counts\n            console.log(\"🔍 Total teams extracted:\", teams.length);\n            teams.forEach((team, index)=>{\n                var _team_players;\n                console.log(\"\\uD83D\\uDD0D Team \".concat(index + 1, \" (\").concat(team.name, \"): \").concat(((_team_players = team.players) === null || _team_players === void 0 ? void 0 : _team_players.length) || 0, \" players\"));\n                if (team.players) {\n                    team.players.forEach((player, playerIndex)=>{\n                        console.log(\"  Player \".concat(playerIndex + 1, \": \").concat(player.name));\n                    });\n                }\n            });\n            const data = {\n                id: raw.id || overview.tournamentId || \"current\",\n                name: overview.tournamentName || raw.name || \"Tournament\",\n                status: overview.status || raw.status || \"setup\",\n                currentRound: overview.currentRound || raw.currentRound || \"\",\n                teams: teams,\n                rounds: (Array.isArray(roundsData) ? roundsData : Object.entries(roundsData).filter((param)=>{\n                    let [, round] = param;\n                    return round && typeof round === \"object\";\n                }).sort((param, param1)=>{\n                    let [keyA] = param, [keyB] = param1;\n                    // Sort rounds in a consistent order: semiFinal1, semiFinal2, final\n                    const order = {\n                        semiFinal1: 1,\n                        semiFinal2: 2,\n                        final: 3\n                    };\n                    return (order[keyA] || 999) - (order[keyB] || 999);\n                }).map((param)=>{\n                    let [, round] = param;\n                    return round;\n                })).map((round)=>({\n                        ...round,\n                        team1Wins: round.team1Wins || 0,\n                        team2Wins: round.team2Wins || 0,\n                        winsNeeded: round.winsNeeded || 5\n                    })),\n                streamingMode: raw.streamingMode || \"normal\",\n                lastWebUpdate: toSafeDate(raw.lastWebUpdate),\n                pushedAt: toSafeDate(raw.pushedAt),\n                pushedBy: raw.pushedBy || \"\"\n            };\n            callback(data);\n        } else {\n            callback(null);\n        }\n    }, (error)=>{\n        console.error(\"Error listening to streaming data:\", error);\n        callback(null);\n    });\n};\n// Get current streaming data (one-time read)\nconst getCurrentStreamingData = async ()=>{\n    try {\n        const streamingRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"streaming\", \"avryzcqeibphtefihmsrjfbugeq1\");\n        const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(streamingRef);\n        if (docSnap.exists()) {\n            const raw = docSnap.data();\n            // Handle mobile app's data structure\n            const overview = raw.overview || {};\n            const roundsData = raw.rounds || {};\n            const data = {\n                id: raw.id || overview.tournamentId || \"current\",\n                name: overview.tournamentName || raw.name || \"Tournament\",\n                status: overview.status || raw.status || \"setup\",\n                currentRound: overview.currentRound || raw.currentRound || \"\",\n                teams: Array.isArray(raw.teams) ? raw.teams : [],\n                rounds: (Array.isArray(roundsData) ? roundsData : Object.entries(roundsData).filter((param)=>{\n                    let [, round] = param;\n                    return round && typeof round === \"object\";\n                }).sort((param, param1)=>{\n                    let [keyA] = param, [keyB] = param1;\n                    // Sort rounds in a consistent order: semiFinal1, semiFinal2, final\n                    const order = {\n                        semiFinal1: 1,\n                        semiFinal2: 2,\n                        final: 3\n                    };\n                    return (order[keyA] || 999) - (order[keyB] || 999);\n                }).map((param)=>{\n                    let [, round] = param;\n                    return round;\n                })).map((round)=>({\n                        ...round,\n                        team1Wins: round.team1Wins || 0,\n                        team2Wins: round.team2Wins || 0,\n                        winsNeeded: round.winsNeeded || 5\n                    })),\n                streamingMode: raw.streamingMode || \"normal\",\n                lastWebUpdate: toSafeDate(raw.lastWebUpdate),\n                pushedAt: toSafeDate(raw.pushedAt),\n                pushedBy: raw.pushedBy || \"\"\n            };\n            return data;\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting current streaming data:\", error);\n        return null;\n    }\n};\n// Listen to the stream control document in real-time\nconst listenToStreamControl = (callback)=>{\n    const streamControlRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"streaming\", \"current_stream_control\");\n    console.log(\"FIREBASE: Listening to stream control document...\");\n    return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.onSnapshot)(streamControlRef, (doc)=>{\n        if (doc.exists()) {\n            console.log(\"FIREBASE: Stream control data received:\", doc.data());\n            callback(doc.data());\n        } else {\n            console.log(\"FIREBASE: Stream control document does not exist, providing default.\");\n            // If the document doesn't exist, provide a default state\n            callback({\n                streamMatches: [],\n                hiddenSections: []\n            });\n        }\n    }, (error)=>{\n        console.error(\"FIREBASE: Error listening to stream control:\", error);\n        // Provide a default state on error as well\n        callback({\n            streamMatches: [],\n            hiddenSections: []\n        });\n    });\n};\n// Update the stream control document\nconst updateStreamControl = async (data)=>{\n    try {\n        const streamControlRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"streaming\", \"current_stream_control\");\n        console.log(\"FIREBASE: Updating stream control with data:\", data);\n        // Use setDoc with merge: true to create the doc if it doesn't exist or update it if it does\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(streamControlRef, data, {\n            merge: true\n        });\n        console.log(\"FIREBASE: Stream control update successful.\");\n    } catch (error) {\n        console.error(\"FIREBASE: Error updating stream control:\", error);\n    }\n};\n// Explore existing Firebase data\nconst exploreFirebaseData = async ()=>{\n    try {\n        console.log(\"🔍 Exploring Firebase data...\");\n        console.log(\"⚠️ Note: Some collections may require authentication\");\n        // Try to check streaming collection first (most likely to be accessible)\n        try {\n            const streamingRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"streaming\", \"avryzcqeibphtefihmsrjfbugeq1\");\n            const streamingDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(streamingRef);\n            if (streamingDoc.exists()) {\n                console.log(\"✅ 📡 Streaming data found:\", streamingDoc.data());\n            } else {\n                console.log(\"📡 No streaming data found (collection exists but empty)\");\n            }\n        } catch (error) {\n            const firebaseError = error;\n            if (firebaseError.code === \"permission-denied\") {\n                console.log(\"❌ 📡 Streaming collection: Permission denied (needs authentication)\");\n            } else {\n                console.log(\"❌ 📡 Streaming collection error:\", firebaseError.message);\n            }\n        }\n        // Try to check users collection\n        try {\n            const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"users\");\n            const usersSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(usersRef);\n            console.log(\"✅ 👥 Users found:\", usersSnapshot.docs.length);\n            usersSnapshot.docs.forEach((doc)=>{\n                console.log(\"  - User \".concat(doc.id, \":\"), doc.data());\n            });\n        } catch (error) {\n            const firebaseError = error;\n            if (firebaseError.code === \"permission-denied\") {\n                console.log(\"❌ 👥 Users collection: Permission denied (needs authentication)\");\n            } else {\n                console.log(\"❌ 👥 Users collection error:\", firebaseError.message);\n            }\n        }\n        // Try to check for any other common collections\n        const commonCollections = [\n            \"tournaments\",\n            \"matches\",\n            \"teams\",\n            \"players\"\n        ];\n        for (const collectionName of commonCollections){\n            try {\n                const collectionRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, collectionName);\n                const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(collectionRef);\n                console.log(\"✅ \\uD83D\\uDCC1 \".concat(collectionName, \" collection: \").concat(snapshot.docs.length, \" documents\"));\n                if (snapshot.docs.length > 0) {\n                    snapshot.docs.slice(0, 2).forEach((doc)=>{\n                        console.log(\"  - \".concat(collectionName, \" \").concat(doc.id, \":\"), doc.data());\n                    });\n                }\n            } catch (error) {\n                const firebaseError = error;\n                if (firebaseError.code === \"permission-denied\") {\n                    console.log(\"❌ \\uD83D\\uDCC1 \".concat(collectionName, \" collection: Permission denied\"));\n                } else {\n                    console.log(\"❌ \\uD83D\\uDCC1 \".concat(collectionName, \" collection error:\"), firebaseError.message);\n                }\n            }\n        }\n        console.log(\"🔍 Exploration complete!\");\n        return true;\n    } catch (error) {\n        console.error(\"❌ Error exploring Firebase:\", error);\n        return false;\n    }\n};\n// ===== AUTHENTICATION FUNCTIONS =====\n// Email validation helper\nconst validateEmail = (email)=>{\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n};\n// Password validation helper\nconst validatePassword = (password)=>{\n    // Strong password: min 8 chars, uppercase, lowercase, number, special char\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n    return passwordRegex.test(password);\n};\n// Create user with email verification\nconst createUserWithEmailVerification = async (email, password, displayName)=>{\n    try {\n        // Validate inputs\n        if (!validateEmail(email)) {\n            throw new Error(\"Invalid email format\");\n        }\n        if (!validatePassword(password)) {\n            throw new Error(\"Password must be at least 8 characters with uppercase, lowercase, number, and special character\");\n        }\n        if (!displayName || displayName.trim().length < 2) {\n            throw new Error(\"Name must be at least 2 characters\");\n        }\n        // Create user account\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.createUserWithEmailAndPassword)(auth, email, password);\n        // Send email verification\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.sendEmailVerification)(userCredential.user);\n        // Create user profile in Firestore\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"users\", userCredential.user.uid), {\n            displayName: displayName.trim(),\n            email,\n            emailVerified: false,\n            createdAt: new Date(),\n            isAdmin: false\n        });\n        return {\n            user: userCredential.user,\n            needsVerification: true,\n            message: \"Account created! Please check your email to verify your account.\"\n        };\n    } catch (error) {\n        const message = error instanceof Error ? error.message : \"Failed to create account\";\n        throw new Error(message);\n    }\n};\n// Sign in user\nconst signInUser = async (email, password)=>{\n    try {\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.signInWithEmailAndPassword)(auth, email, password);\n        // Check if email is verified\n        if (!userCredential.user.emailVerified) {\n            await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.signOut)(auth);\n            throw new Error(\"Please verify your email before signing in. Check your inbox for the verification link.\");\n        }\n        return userCredential.user;\n    } catch (error) {\n        const message = error instanceof Error ? error.message : \"Failed to sign in\";\n        throw new Error(message);\n    }\n};\n// Sign out user\nconst signOutUser = async ()=>{\n    try {\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.signOut)(auth);\n    } catch (error) {\n        const message = error instanceof Error ? error.message : \"Failed to sign out\";\n        throw new Error(message);\n    }\n};\n// Resend email verification\nconst resendEmailVerification = async ()=>{\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new Error(\"No user logged in\");\n        }\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.sendEmailVerification)(user);\n        return \"Verification email sent! Please check your inbox.\";\n    } catch (error) {\n        const message = error instanceof Error ? error.message : \"Failed to send verification email\";\n        throw new Error(message);\n    }\n};\n// Delete user account\nconst deleteUserAccount = async (password)=>{\n    try {\n        const user = auth.currentUser;\n        if (!user || !user.email) {\n            throw new Error(\"No user logged in\");\n        }\n        // Re-authenticate user before deletion\n        const credential = firebase_auth__WEBPACK_IMPORTED_MODULE_2__.EmailAuthProvider.credential(user.email, password);\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.reauthenticateWithCredential)(user, credential);\n        // Delete user data from Firestore\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"users\", user.uid));\n        // Delete user account\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.deleteUser)(user);\n        return \"Account deleted successfully\";\n    } catch (error) {\n        const firebaseError = error;\n        const message = firebaseError.message || \"Failed to delete account\";\n        throw new Error(message);\n    }\n};\n// Get current user\nconst getCurrentUser = ()=>{\n    return auth.currentUser;\n};\n// Check if user is authenticated\nconst isUserAuthenticated = ()=>{\n    return !!auth.currentUser;\n};\n// Check if user email is verified\nconst isEmailVerified = ()=>{\n    var _auth_currentUser;\n    return ((_auth_currentUser = auth.currentUser) === null || _auth_currentUser === void 0 ? void 0 : _auth_currentUser.emailVerified) || false;\n};\n// Send password reset email\nconst sendPasswordReset = async (email)=>{\n    try {\n        // Validate email format\n        if (!validateEmail(email)) {\n            throw new Error(\"Invalid email format\");\n        }\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.sendPasswordResetEmail)(auth, email);\n        return \"Password reset email sent! Please check your inbox and follow the instructions.\";\n    } catch (error) {\n        const firebaseError = error;\n        // Handle specific Firebase errors\n        if (firebaseError.code === \"auth/user-not-found\") {\n            throw new Error(\"No account found with this email address\");\n        } else if (firebaseError.code === \"auth/invalid-email\") {\n            throw new Error(\"Invalid email address\");\n        } else if (firebaseError.code === \"auth/too-many-requests\") {\n            throw new Error(\"Too many password reset attempts. Please try again later.\");\n        }\n        throw new Error(firebaseError.message || \"Failed to send password reset email\");\n    }\n};\n// Update password (for logged-in users)\nconst updateUserPassword = async (currentPassword, newPassword)=>{\n    try {\n        const user = auth.currentUser;\n        if (!user || !user.email) {\n            throw new Error(\"No user logged in\");\n        }\n        // Validate new password\n        if (!validatePassword(newPassword)) {\n            throw new Error(\"New password must be at least 8 characters with uppercase, lowercase, number, and special character\");\n        }\n        // Re-authenticate user\n        const credential = firebase_auth__WEBPACK_IMPORTED_MODULE_2__.EmailAuthProvider.credential(user.email, currentPassword);\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.reauthenticateWithCredential)(user, credential);\n        // Update password\n        await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.updatePassword)(user, newPassword);\n        return \"Password updated successfully\";\n    } catch (error) {\n        const firebaseError = error;\n        if (firebaseError.code === \"auth/wrong-password\") {\n            throw new Error(\"Current password is incorrect\");\n        } else if (firebaseError.code === \"auth/weak-password\") {\n            throw new Error(\"New password is too weak\");\n        }\n        throw new Error(firebaseError.message || \"Failed to update password\");\n    }\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/firebase.ts\n"));

/***/ })

});